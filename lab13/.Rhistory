filter(country==c("Mozambique", "Sierra Leone", "Malawi", "Niger", "Somalia", "Burundi")) %>%
ggplot(aes(x=gdp_per_capita, y=life_expectancy))+ facet_wrap(.~country)+
theme_bw()+
labs(title= "Comparing Life Expectancy & GDP Per Capita",
x="GDP Per Individual",
y="Life Expectancy (years)")+
theme(plot.title=element_text(face="bold",hjust=0.5))
gapminder_join %>%
filter(country==c("Mozambique", "Sierra Leone", "Malawi", "Niger", "Somalia", "Burundi")) %>%
ggplot(aes(x=as.numeric(gdp_per_capita), y=life_expectancy))+ facet_wrap(.~country)+
theme_bw()+
labs(title= "Comparing Life Expectancy & GDP Per Capita",
x="GDP Per Individual",
y="Life Expectancy (years)")+
theme(plot.title=element_text(face="bold",hjust=0.5))
gapminder_join %>%
filter(country==c("Mozambique", "Sierra Leone", "Malawi", "Niger", "Somalia", "Burundi")) %>%
ggplot(aes(x=as.numeric(gdp_per_capita), y=life_expectancy))+ geom_point(size=0.5)+
geom_smooth(method="lm", se=FALSE, color="purple")+
facet_wrap(.~country)+
theme_bw()+
labs(title= "Comparing Life Expectancy & GDP Per Capita",
x="GDP Per Individual",
y="Life Expectancy (years)")+
theme(plot.title=element_text(face="bold",hjust=0.5))
gapminder_join %>%
filter(country==c("Mozambique", "Sierra Leone", "Malawi", "Niger", "Somalia", "Burundi")) %>%
ggplot(aes(x=as.numeric(gdp_per_capita), y=life_expectancy))+ geom_point(size=1.25)+
geom_smooth(method="lm", se=FALSE, color="purple")+
facet_wrap(.~country)+
theme_bw()+
labs(title= "Comparing Life Expectancy & GDP Per Capita",
x="GDP Per Individual",
y="Life Expectancy (years)")+
theme(plot.title=element_text(face="bold",hjust=0.5))
gapminder_join %>%
filter(country==c("Mozambique", "Sierra Leone", "Malawi", "Niger", "Somalia", "Burundi")) %>%
ggplot(aes(x=as.numeric(gdp_per_capita), y=life_expectancy))+ geom_point(size=1.25)+
geom_smooth(method="lm", se=FALSE, color="purple")+
facet_wrap(.~country)+
theme_bw()+
scale_color_brewer(values=palette)+
labs(title= "Comparing Life Expectancy & GDP Per Capita",
x="GDP Per Individual",
y="Life Expectancy (years)")+
theme(plot.title=element_text(face="bold",hjust=0.5))
gapminder_join %>%
filter(country==c("Mozambique", "Sierra Leone", "Malawi", "Niger", "Somalia", "Burundi")) %>%
ggplot(aes(x=as.numeric(gdp_per_capita), y=life_expectancy))+ geom_point(size=1.25)+
geom_smooth(method="lm", se=FALSE, color="purple")+
facet_wrap(.~country)+
theme_bw()+
scale_color_manual(values=palette)+
labs(title= "Comparing Life Expectancy & GDP Per Capita",
x="GDP Per Individual",
y="Life Expectancy (years)")+
theme(plot.title=element_text(face="bold",hjust=0.5))
gapminder_join %>%
filter(country==c("Mozambique", "Sierra Leone", "Malawi", "Niger", "Somalia", "Burundi")) %>%
ggplot(aes(x=as.numeric(gdp_per_capita), y=life_expectancy))+ geom_point(size=1.25)+
geom_smooth(method="lm", se=FALSE, color="purple")+
facet_wrap(.~country)+
theme_minimal()+
labs(title= "Comparing Life Expectancy & GDP Per Capita",
x="GDP Per Individual",
y="Life Expectancy (years)")+
theme(plot.title=element_text(face="bold",hjust=0.5))
gapminder_join %>%
filter(country==c("Mozambique", "Sierra Leone", "Malawi", "Niger", "Somalia", "Burundi")) %>%
ggplot(aes(x=as.numeric(gdp_per_capita), y=life_expectancy))+ geom_point(size=1.25)+
geom_smooth(method="lm", se=FALSE, color="purple")+
facet_wrap(.~country)+
theme_bw()+
labs(title= "Comparing Life Expectancy & GDP Per Capita",
x="GDP Per Individual",
y="Life Expectancy (years)")+
theme(plot.title=element_text(face="bold",hjust=0.5))
gapminder_join %>%
filter(year==2020) %>%
filter(country==c("Mozambique", "Sierra Leone", "Malawi", "Niger", "Somalia", "Burundi")) %>%
ggplot(aes(x=as.numeric(gdp_per_capita), y=life_expectancy))+ geom_point(size=1.25)+
geom_smooth(method="lm", se=FALSE, color="purple")+
facet_wrap(.~country)+
theme_bw()+
labs(title= "Comparing Life Expectancy & GDP Per Capita",
x="GDP Per Individual",
y="Life Expectancy (years)")+
theme(plot.title=element_text(face="bold",hjust=0.5))
gapminder_join %>%
filter(year>=2000 & year<=2020) %>%
filter(country==c("Mozambique", "Sierra Leone", "Malawi", "Niger", "Somalia", "Burundi")) %>%
ggplot(aes(x=as.numeric(gdp_per_capita), y=life_expectancy))+ geom_point(size=1.25)+
geom_smooth(method="lm", se=FALSE, color="purple")+
facet_wrap(.~country)+
theme_bw()+
labs(title= "Comparing Life Expectancy & GDP Per Capita",
x="GDP Per Individual",
y="Life Expectancy (years)")+
theme(plot.title=element_text(face="bold",hjust=0.5))
gapminder_join %>%
filter(country==c("Mozambique", "Sierra Leone", "Malawi", "Niger", "Somalia", "Burundi")) %>%
ggplot(aes(x=as.numeric(gdp_per_capita), y=life_expectancy))+ geom_point(size=1.25)+
geom_smooth(method="lm", se=FALSE, color="purple")+
facet_wrap(.~country)+
theme_bw()+
labs(title= "Comparing Life Expectancy & GDP Per Capita",
x="GDP Per Individual",
y="Life Expectancy (years)")+
theme(plot.title=element_text(face="bold",hjust=0.5))
gapminder_join %>%
filter(country==c("Mozambique", "Sierra Leone", "Malawi", "Niger", "Somalia", "Burundi")) %>%
ggplot(aes(x=as.numeric(gdp_per_capita), y=life_expectancy))+ geom_point(size=1.25)+
geom_smooth(method="lm", se=FALSE, color="lavendar")+
facet_wrap(.~country)+
theme_bw()+
labs(title= "Comparing Life Expectancy & GDP Per Capita",
x="GDP Per Individual",
y="Life Expectancy (years)")+
theme(plot.title=element_text(face="bold",hjust=0.5))
gapminder_join %>%
filter(country==c("Mozambique", "Sierra Leone", "Malawi", "Niger", "Somalia", "Burundi")) %>%
ggplot(aes(x=as.numeric(gdp_per_capita), y=life_expectancy))+ geom_point(size=1.25)+
geom_smooth(method="lm", se=FALSE, color="purple")+
facet_wrap(.~country)+
theme_dark()+
labs(title= "Comparing Life Expectancy & GDP Per Capita",
x="GDP Per Individual",
y="Life Expectancy (years)")+
theme(plot.title=element_text(face="bold",hjust=0.5))
gapminder_join %>%
filter(country==c("Mozambique", "Sierra Leone", "Malawi", "Niger", "Somalia", "Burundi")) %>%
ggplot(aes(x=as.numeric(gdp_per_capita), y=life_expectancy))+ geom_point(size=1.25)+
geom_smooth(method="lm", se=FALSE, color="purple")+
facet_wrap(.~country)+
theme_gray()+
labs(title= "Comparing Life Expectancy & GDP Per Capita",
x="GDP Per Individual",
y="Life Expectancy (years)")+
theme(plot.title=element_text(face="bold",hjust=0.5))
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(tidyverse)
library(here)
library(janitor)
library(lubridate)
files <- list.files(path = "data/spiders", pattern = ".csv")
files
files <- list.files(path = "data/spiders", pattern = ".csv", full.names = TRUE)
files
spider_list <- lapply(files, read_csv) #looping function over all files
spider_list[[3]]
class(spider_list[[3]])
spider_list[[15]]
names(spider_list[[10]])
spider_list[[22]]
str(spider_list[[2]])
names <- list.files(path = "data/spiders", pattern = ".csv")
names_list <- strsplit(names, split = " .csv")
names_list
names_vec <- unlist(names_list)
names_vec
names(spider_list) <- names_vec
names(spider_list)
spider_list$Butte
spider_list$Napa
spiders_all <- bind_rows(spider_list)
spiders_all
table_A <- read_csv(here("lab12", "data", "table_A.csv"))
table_B <- read_csv(here("lab12", "data", "table_B.csv"))
names(table_A)
summary(table_A)
summary(table_B)
inner_exampleDF <- inner_join(table_A, table_B, by="customer_ID")
inner_exampleDF
left_exampleDF <- left_join(table_A, table_B, by="customer_ID")
left_exampleDF
right_exampleDF <- right_join(table_A, table_B, by="customer_ID")
right_exampleDF
full_exampleDF <- full_join(table_A, table_B, by="customer_ID")
full_exampleDF
semi_exampleDF <- semi_join(table_A, table_B, by="customer_ID")
semi_exampleDF
anti_exampleDF <- anti_join(table_A, table_B, by="customer_ID")
anti_exampleDF #both not represented
spiders_with_locs <- left_join(spiders_all, spiders_locs, by = c("Accession"))
spiders_with_locs <- left_join(spiders_all, spiders_locs, by = c("Accession"))
spiders_locs <- read_csv("data/spiders locations/spiders_locations.csv")
spiders_locs
spiders_locs <- read_csv("data/spiders locations/spiders_locations.csv")
spiders_locs
spiders_with_locs <- left_join(spiders_all, spiders_locs, by = c("Accession"))
summary(spiders_with_locs)
day <- today()
str(day) #year, month, day
datetime <- now()
datetime
datetime <- now()
datetime
dmy(spiders_with_locs$Date)
ymd(dataformat1)
dateformat1 <- "20200922"
dateformat2 <- "09-22-2020"
dateformat3 <- "22/09/2020"
dateformat4 <- "09-22-2020 17:00:00"
dateformat5 <- "20200922 170000"
ymd(dataformat1)
as.Date(spiders_with_locs$Date, format = "%d/%m/%y") #not lubridate
ymd(dateformat1)
mdy(dateformat2)
dmy(dateformat3)
mdy_hms(dateformat4)
ymd_hms(dateformat5)
write.csv(spiders_with_locs, file = "spiders_with_locs.csv", row.names = FALSE)
install.packages("devtools")
#library(devtools)
#devtools::install_github("dkahle/ggmap")
install.packages("devtools")
library(devtools)
#devtools::install_github("dkahle/ggmap")
install.packages("devtools")
library(devtools)
devtools::install_github("dkahle/ggmap")
install.packages(c("cli", "clipr", "colorspace", "crayon", "dplyr", "evaluate", "fansi", "generics", "glue", "jsonlite", "magrittr", "pillar", "readr", "rlang", "tidyr", "tidyselect", "tinytex", "yaml"))
install.packages(c("cli", "clipr", "colorspace", "crayon", "dplyr", "evaluate", "fansi", "generics", "glue", "jsonlite", "magrittr", "pillar", "readr", "rlang", "tidyr", "tidyselect", "tinytex", "yaml"))
install.packages(c("cli", "colorspace", "dplyr", "fansi", "glue", "jsonlite", "magrittr", "readr", "rlang", "tidyr", "yaml"))
install.packages("albersusa")
knitr::opts_chunk$set(echo = TRUE)
if (!require("tidyverse")) install.packages('tidyverse')
install.packages("ggVennDiagram")
install.packages("ggworldcloud")
install.packages("ggworldcloud")
install.packages(c("cli", "glue"))
install.packages("ggworldcloud")
remove.packages("ggworldcloud")
knitr::opts_chunk$set(echo = TRUE)
if (!require("tidyverse")) install.packages('tidyverse')
library(tidyverse)
library(shiny)
library(shinydashboard)
UC_admit <- readr::read_csv("data/UC_admit.csv") %>% clean_names()
library(tidyverse)
library(shiny)
library(shinydashboard)
library(janitor)
UC_admit <- readr::read_csv("data/UC_admit.csv") %>% clean_names()
knitr::opts_chunk$set(echo = TRUE)
if (!require("tidyverse")) install.packages('tidyverse')
library(tidyverse)
library(shiny)
library(shinydashboard)
library(janitor)
UC_admit <- readr::read_csv("data/UC_admit.csv") %>% clean_names()
names(UC_admit)
glimpse(UC_admit)
summary(UC_admit)
is.na(UC_admit)
naniar::miss_var_summary(UC_admit)
colnames(campus)
ui <- dashboardPage(
dashboardHeader(title = "UC Admission"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box( title = "Select variable",width = 3,
selectInput("x","select year",
choices = c("2010","2011","2012","2013","2014","2015","2016","2017","2018","2019"),
selected = "2010"),
selectInput("y","select campus",
choices = c("Berkeley","Davis","Irvine","Los_Angeles","Merced","Riverside","San_Diego","Santa_Barbara","Santa_Cruz"),
selected = "Berkeley"),
selectInput("z","select admit category",
choices = c("Admits","Enrollees","Applicants"),
selected = "Admits")
),
box(
title = "UC admission Plot",width = 7,
plotOutput("plot",width = "600px",height = "500px")
)
)
)
)
server <- function(input, output,session) {
output$plot<-renderPlot({
uc_admit%>%
filter(academic_yr==input$x&campus==input$y&category==input$z)%>%
ggplot(aes_string(x="ethnicity",y="filtered_count_fr",fill="ethnicity"))+
geom_col(alpha=0.8,color="Black")+
theme_linedraw()+
theme(axis.text.x = element_text(hjust = 1,angle = 60))+
labs(x="Ethnicity", y="Flitered Count")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "UC Admission"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box( title = "Select variable",width = 3,
selectInput("x","select year",
choices = c("2010","2011","2012","2013","2014","2015","2016","2017","2018","2019"),
selected = "2010"),
selectInput("y","select campus",
choices = c("Berkeley","Davis","Irvine","Los_Angeles","Merced","Riverside","San_Diego","Santa_Barbara","Santa_Cruz"),
selected = "Berkeley"),
selectInput("z","select admit category",
choices = c("Admits","Enrollees","Applicants"),
selected = "Admits")
),
box(
title = "UC admission Plot",width = 7,
plotOutput("plot",width = "600px",height = "500px")
)
)
)
)
server <- function(input, output,session) {
output$plot<-renderPlot({
UC_admit%>%
filter(academic_yr==input$x&campus==input$y&category==input$z)%>%
ggplot(aes_string(x="ethnicity",y="filtered_count_fr",fill="ethnicity"))+
geom_col(alpha=0.8,color="Black")+
theme_linedraw()+
theme(axis.text.x = element_text(hjust = 1,angle = 60))+
labs(x="Ethnicity", y="Flitered Count")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "UC Admission"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box( title = "Select variable",width = 3,
selectInput("x","select year",
choices = c("2010","2011","2012","2013","2014","2015","2016","2017","2018","2019"),
selected = "2010"),
selectInput("y","select campus",
choices = c("Berkeley","Davis","Irvine","Los_Angeles","Merced","Riverside","San_Diego","Santa_Barbara","Santa_Cruz"),
selected = "Berkeley"),
selectInput("z","select admit category",
choices = c("Admits","Enrollees","Applicants"),
selected = "Admits")
),
box(
title = "UC admission Plot",width = 7,
plotOutput("plot",width = "600px",height = "500px")
)
)
)
)
server <- function(input, output,session) {
output$plot<-renderPlot({
UC_admit%>%
filter(academic_yr==input$x&campus==input$y&category==input$z)%>%
ggplot(aes_string(x="ethnicity",y="filtered_count_fr",fill="Ethnicity"))+
geom_col(alpha=0.8,color="Black")+
theme_linedraw()+
theme(axis.text.x = element_text(hjust = 1,angle = 60))+
labs(x="Ethnicity", y="Flitered Count")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "UC Admission"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box( title = "Select variable",width = 3,
selectInput("x","select year",
choices = c("2010","2011","2012","2013","2014","2015","2016","2017","2018","2019"),
selected = "2010"),
selectInput("y","select campus",
choices = c("Berkeley","Davis","Irvine","Los_Angeles","Merced","Riverside","San_Diego","Santa_Barbara","Santa_Cruz"),
selected = "Berkeley"),
selectInput("z","select admit category",
choices = c("Admits","Enrollees","Applicants"),
selected = "Admits")
),
box(
title = "UC admission Plot",width = 7,
plotOutput("plot",width = "600px",height = "500px")
)
)
)
)
server <- function(input, output,session) {
output$plot<-renderPlot({
UC_admit%>%
filter(academic_yr==input$x&campus==input$y&category==input$z)%>%
ggplot(aes_string(x="ethnicity",y="filtered_count_fr",fill="ethnicity"))+
geom_col(alpha=0.8,color="Black")+
theme_linedraw()+
theme(axis.text.x = element_text(hjust = 1,angle = 60))+
labs(x="Ethnicity", y="Flitered Count")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "UC Admission"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box( title = "Select variable",width = 3,
selectInput("x","select year",
choices = c("2010","2011","2012","2013","2014","2015","2016","2017","2018","2019"),
selected = "2010"),
selectInput("y","select campus",
choices = c("Berkeley","Davis","Irvine","Los_Angeles","Merced","Riverside","San_Diego","Santa_Barbara","Santa_Cruz"),
selected = "Berkeley"),
selectInput("z","select admit category",
choices = c("Admits","Enrollees","Applicants"),
selected = "Admits")
),
box(
title = "UC admission Plot",width = 7,
plotOutput("plot",width = "600px",height = "500px")
)
)
)
)
server <- function(input, output,session) {
output$plot<-renderPlot({
UC_admit%>%
filter(academic_yr==input$x&campus==input$y&category==input$z)%>%
ggplot(aes_string(x="ethnicity",y="filtered_count_fr",fill="ethnicity"))+
geom_col(alpha=0.8,color="Black")+
theme_linedraw()+
theme(axis.text.x = element_text(hjust = 1,angle = 60))+ theme(plot.title=element_text(face="bold", hjust=0.5))+
labs(x="Ethnicity", y="Flitered Count")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "UC Admission"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box( title = "Select variable",width = 3,
selectInput("x","select year",
choices = c("2010","2011","2012","2013","2014","2015","2016","2017","2018","2019"),
selected = "2010"),
selectInput("y","select campus",
choices = c("Berkeley","Davis","Irvine","Los_Angeles","Merced","Riverside","San_Diego","Santa_Barbara","Santa_Cruz"),
selected = "Berkeley"),
selectInput("z","select admit category",
choices = c("Admits","Enrollees","Applicants"),
selected = "Admits")
),
box(
title = "UC admission Plot",width = 7,
plotOutput("plot",width = "600px",height = "500px")
)
)
)
)
server <- function(input, output,session) {
output$plot<-renderPlot({
UC_admit%>%
filter(academic_yr==input$x&campus==input$y&category==input$z)%>%
ggplot(aes_string(x="ethnicity",y="filtered_count_fr",fill="ethnicity"))+
geom_col(alpha=0.8,color="Black")+
theme_linedraw()+
theme(axis.text.x = element_text(hjust = 1,angle = 60))+
labs(x="Ethnicity", y="Flitered Count")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "UC Admission"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box( title = "Select variable",width = 3,
selectInput("x","select year",
choices = c("2010","2011","2012","2013","2014","2015","2016","2017","2018","2019"),
selected = "2010"),
selectInput("y","select campus",
choices = c("Berkeley","Davis","Irvine","Los_Angeles","Merced","Riverside","San_Diego","Santa_Barbara","Santa_Cruz"),
selected = "Berkeley"),
selectInput("z","select admit category",
choices = c("Admits","Enrolled","Applicants"),
selected = "Admits")
),
box(
title = "UC admission Plot",width = 7,
plotOutput("plot",width = "600px",height = "500px")
)
)
)
)
server <- function(input, output,session) {
output$plot<-renderPlot({
UC_admit%>%
filter(academic_yr==input$x&campus==input$y&category==input$z)%>%
ggplot(aes_string(x="ethnicity",y="filtered_count_fr",fill="ethnicity"))+
geom_col(alpha=0.8,color="Black")+
theme_linedraw()+
theme(axis.text.x = element_text(hjust = 1,angle = 60))+
labs(x="Ethnicity", y="Flitered Count")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
